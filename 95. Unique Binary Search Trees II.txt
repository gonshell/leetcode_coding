95. Unique Binary Search Trees II

Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> genSubTrees(vector<int> arr, int start, int end) {
        int size = end - start;
        vector<TreeNode*> subs;
        if (size <= 0)
            return subs;
        
        if (size <= 2) {
            TreeNode *item0 = new TreeNode(arr[start]);
            if (size > 1)
                item0->right=new TreeNode(arr[start+1]);
            subs.push_back(item0);
            
            if (size > 1) {
                TreeNode *item1 = new TreeNode(arr[start+1]);
                item1->left=new TreeNode(arr[start]);
                subs.push_back(item1);
            }
        } else {
            for (int i=start; i<end; i++) {
                int s0 = start;
                int e0 = end;
                vector<TreeNode*> left;
                vector<TreeNode*> right;
                
                if (i > 0) {
                    e0 = i;
                    left = genSubTrees(arr, s0, e0);
                }
                
                if (i < end-1) {
                    s0 = i+1;
                    e0 = end;
                    right = genSubTrees(arr, s0, e0);
                }
                
                int j = 0;
                do {
                    int k = 0;
                    do {
                        TreeNode *item = new TreeNode(arr[i]);

                        if (j < left.size())
                            item->left = left[j];

                        if (k < right.size())
                            item->right = right[k++];

                        subs.push_back(item);
                    } while (k<right.size());
                
                    j ++;
                } while(j<left.size());
            }
        }
        
        return subs;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> tree;
        
        if (n<=0)
            return tree;
        
        vector<int> arr;
        for (int i=0; i<n; i++) {
            arr.push_back(i+1);
        }
        
        tree = genSubTrees(arr, 0, arr.size());
        
        return tree;
    }
};


解法思路解法思路s解法思路解法思路s：
1.将数组排序
2.将选定root节点值，递归调用，将数组中左边值作为右边节点作为右支树
3.支树排序递归调用下去，在剩余两个节点时停止递归。

问题：
1.左右支树合并为树的这个事情没有想清楚,存在可以左支树为空，也可以右子树为空的情况。
2.递归调用时候，是否传递新数组或者原数组带上起始节点，优化思想没有考虑清楚。


