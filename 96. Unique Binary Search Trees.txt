96. Unique Binary Search Trees

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


class Solution {
    vector<int> arr0;
    
public:
    int numSubTrees(vector<int>arr, int start, int end)
    {
        int count = 0;
        if (end - start <= 0)
            return 0;
        
        int size = end - start;
        
        if (arr0[size-1]>0)
            return arr0[size-1];
        
        if (size <= 2) {
            count = size;
        } else {
            for (int i = start; i < end; i ++) {
                int leftCount = 0;
                int rightCount = 0;
                
                int s0 = start;
                int e0 = i;
                if (i > start)
                    leftCount = numSubTrees(arr, s0, e0);
                
                s0 = i+1;
                e0 = end;
                if (i < end-1)
                    rightCount = numSubTrees(arr, s0, e0);
                
                int c = max(leftCount,1)*max(rightCount,1);
                count+=c;
            }
        }
        
        arr0[size-1]=count;
        return count;
    }
    
    int numTrees(int n) {
        vector<int> arr;
        
        for (int i = 0; i < n; i ++)
            arr0.push_back(-1);
        
        for (int i = 0; i < n; i ++)
            arr.push_back(i+1);
        
        return numSubTrees(arr, 0, arr.size());
    }
};


1.递归计算左右支树的数目，然后相乘，避免左右支树为0的情况的问题，左支树为0的情况下，整个计算值是右支树数目。
2.问题：节点树对应的支树树木，应该放入到一个缓存中避免重复计算次数。   


