98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool checkSubBST(TreeNode* sub, int maxVal, int minVal) {
        bool ret = true;
        do {
            if (sub->left) {
                if (sub->left->val >= sub->val)
                    ret = false;
                else if (minVal != INT_MAX && sub->left->val <= minVal)
                    ret = false;
                else
                    ret = checkSubBST(sub->left, sub->val, minVal);
            }
            
            if (!ret)
                break;
            
            if (sub->right) {
                if (sub->right->val <= sub->val)
                    ret = false;
                else if (maxVal != INT_MAX && sub->right->val >= maxVal)
                    ret = false;
                else
                    ret = checkSubBST(sub->right, maxVal, sub->val);
            }
        } while (false);
        
        return ret;
    }
    
    bool isValidBST(TreeNode* root) {
        bool ret = true;
        if (!root)
            return ret;
        do {
            if (root->left) {
                if (root->left->val >= root->val)
                    ret = false;
                else
                    ret = checkSubBST(root->left, root->val, INT_MIN);
            }
            if (!ret)
                break;
            
            if (root->right) {
                if (root->right->val <= root->val)
                    ret = false;
                else
                    ret = checkSubBST(root->right, INT_MAX, root->val);
            }
        } while (false);
        return ret;
    }
};

解法1:深度优先遍历方式下，还是需要着色来解决是否遍历过某些节点
解法2:广度优先遍历方式下，往上回溯一层父节点，多往上回溯父节点就比较复杂

问题的模型是，左支树的所有节点要小于父节点，如此递归下去；右支树都要大于父节点，如此递归下去。
             